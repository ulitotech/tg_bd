from aiogram import Router, F
from aiogram.filters import Text, StateFilter
from aiogram.types import CallbackQuery, Message
from database.database import change_user, creating_db, add_user, del_db, del_user, get_user_in_status, get_month_bd, get_notif_param, change_notif, get_user_in_surname
from lexicon.lexicon import LEXICON, month
from filters.filters import Is_Admin, Is_Superuser, DateCheck, IsContact, Superuser
from keyboards.main_keyboards import *
import datetime
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.fsm.storage.memory import MemoryStorage
router = Router()
storage: MemoryStorage = MemoryStorage()
user_page = {}

#–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class FSMFillForm(StatesGroup):
    fill_name = State()
    fill_surname = State()
    fill_date = State()
    fill_id = State()
    fill_satus_walley = State()
    
#–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class FSMEditForm(StatesGroup):
    start_edit = State()
    edit_name = State()
    edit_surname = State()
    edit_date = State()
    edit_statuswalley = State()
    edit_cash = State()
    process_edit = State()
 
#–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
class FSMEditNotif(StatesGroup):
    edit_phone = State()
    edit_bank = State()
#–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤   
class FSMSearchUser(StatesGroup):
    input_surname = State()
   
#–ü—Ä–µ–º–µ–Ω—é superuser
@router.message(Superuser(), Text(text='/start'))
@router.callback_query(Superuser(), Text(text='main_menu'))
async def premenu_su(msg:Message|CallbackQuery, state : FSMContext):
    await state.clear()   
    if type(msg) == Message:
        await msg.answer(
            text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=premenu_keyboard()
            )
        await msg.delete()
    else:
        await msg.message.answer(
            text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=premenu_keyboard()
            )
        await msg.message.delete() 
            
#–í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –¥–ª—è superuser\superadmin
@router.callback_query(Text(text=["admin_status", "su_status"]))    
async def process_start_su(callback: CallbackQuery):   
    if callback.data =='admin_status':
        await change_user(id_=callback.from_user.id, param="status", new_value="SuperAdmin")
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
            reply_markup=create_start_keyboard("Admin")
            )
    elif callback.data =='su_status':
        await change_user(id_=callback.from_user.id, param="status", new_value="SuperUser")
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
            reply_markup=create_start_keyboard("SuperUser")
            )
    await callback.message.delete()

#–í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.message(Is_Admin(), Text(text='/start'))
@router.callback_query(Is_Admin(), Text(text='main_menu'))
async def process_start_admin(msg:Message|CallbackQuery, state : FSMContext):
    await state.clear()
    if type(msg) == Message:
        await msg.answer(
            text="–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
            reply_markup=create_start_keyboard("Admin")
            )
        await msg.delete()
    else:
        await msg.message.answer(
            text="–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
            reply_markup=create_start_keyboard("Admin")
            )
        await msg.message.delete()


#–ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
@router.callback_query(Is_Admin(), lambda callback: callback.data == "search_user",StateFilter(default_state))
async def search_user(callback:CallbackQuery, state: FSMContext):
    answer = "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    await callback.message.edit_text(text=answer,reply_markup=footer_keyboard())
    await state.set_state(FSMSearchUser.input_surname)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–µ  
@router.message(Is_Admin(), StateFilter(FSMSearchUser.input_surname), F.text.isalpha())
async def get_user_info(message:Message, state: FSMContext):
    await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:", reply_markup=footer_keyboard())
    await state.clear()
    prepare_list = await get_user_in_surname(message.text)
    now = datetime.datetime.now()
    if len(prepare_list)==0:
        answer_text = "–ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ—Ç\.\.\."  
    else: 
        answer_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n" 
        for u in prepare_list:
            date = u[2].split("-")
            date[0], date[1], date[2] = date[2], month[date[1]], date[0]
            date = " ".join(date)
            age = (now - datetime.datetime.strptime(u[2], "%Y-%m-%d")).days // 365
            age_prefix = "–ª–µ—Ç" if list(str(age))[1] in ('0','5','6','7','8','9') else '–≥–æ–¥–∞'
            status_walley = f"–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥: {'–°–æ–±–∏—Ä–∞–µ–º' if u[4] == 'True' else '–ù–µ —Å–æ–±–∏—Ä–∞–µ–º'}"
            cash = f"–°—É–º–º–∞ —Å–±–æ—Ä–∞: {u[5]} —Ä—É–±–ª–µ–π"
            answer_text+=f"üìå __*{u[0]} {u[1]}*__\n{date}\n–í–æ–∑—Ä–∞—Å—Ç: {age} {age_prefix}\n{status_walley}\n{cash}\n\*\*\*\*\*\*\*\*\*\n"
    await message.answer(text=answer_text,reply_markup=footer_keyboard())
    await message.delete()
    await state.clear()


        
#–°–º–µ–Ω–∞ –±–∞–Ω–∫–∞\–Ω–æ–º–µ—Ä–∞
@router.callback_query(Is_Admin(), lambda callback: callback.data == "edit_phone" or callback.data == "edit_bank", StateFilter(default_state)) 
async def edit_notif_param(callback: CallbackQuery, state:FSMContext):
    if callback.data == "edit_phone":
        phone = get_notif_param('phone')
        answer = f"–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä \(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ\):\n–°—Ç–∞—Ä—ã–π: {phone}"
        await callback.message.edit_text(text=answer, reply_markup=footer_keyboard())
        await state.set_state(FSMEditNotif.edit_phone)
    else:
        bank = get_notif_param('bank')
        answer = f"–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –±–∞–Ω–∫:\n–°—Ç–∞—Ä—ã–π: {bank}"
        await callback.message.edit_text(text=answer, reply_markup=footer_keyboard())
        await state.set_state(FSMEditNotif.edit_bank)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞  
@router.message(Is_Admin(), StateFilter(FSMEditNotif.edit_phone), F.text.isdigit())
async def edit_notif_phone(message:Message, state: FSMContext):
    await change_notif(param="phone_number",new_value=str(message.text))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=create_start_keyboard("Admin"))
    await state.clear()
    
#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –±–∞–Ω–∫–∞
@router.message(Is_Admin(), StateFilter(FSMEditNotif.edit_bank), F.text.isalpha())
async def edit_notif_bank(message:Message, state: FSMContext):
    await change_notif(param="bank",new_value=str(message.text))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=create_start_keyboard("Admin"))
    await state.clear()

#–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ 
@router.message(lambda x: Is_Superuser() or Is_Admin(),Text(text='/help'))
async def help_process(message:Message, state : FSMContext):
    await state.clear()
    await message.delete()
    await message.answer(text=LEXICON['help'])
    
#–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è  
@router.callback_query(lambda x: Is_Superuser() or Is_Admin(), Text(text='exit'))
async def exit_process(callback:CallbackQuery, state : FSMContext):
    await state.clear()
    await callback.message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –≤–≤–µ–¥–∏ /start")
    await callback.message.delete()
    
#–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(Is_Superuser(), Text(text='create_bd'))
async def process_creating_bd(callback:CallbackQuery):
    await creating_db()
    await callback.answer(
        text="‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    
#–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(Is_Superuser(), Text(text='del_bd'))
async def process_deleting_bd(callback:CallbackQuery):
    await del_db()
    await callback.answer(
        text="‚ò†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

#–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä –≤ —ç—Ç–æ–º\—Å–ª. –º–µ—Å—è—Ü–µ
@router.callback_query(Is_Admin(), lambda callback: 'bd_this_month' in callback.data or 'bd_next_month' in callback.data) 
async def get_bd_in_month(callback:CallbackQuery):
    now = datetime.datetime.now()
    month = {'bd_this_month':['now', '—ç—Ç–æ–º'],'bd_next_month':['next','—Å–ª–µ–¥—É—é—â–µ–º']}
    answer_text = f"__*‚ö†Ô∏è–í {month[callback.data][1]} –º–µ—Å—è—Ü–µ –ø—Ä–∞–∑–¥–Ω—É—é—Ç —Å–≤–æ–∏ –î–†:‚ö†Ô∏è*__\n"
    bds = [i for i in get_month_bd(month[callback.data][0])]
    bds.sort(key=lambda x: x[2].split("-")[2])
    for bd in bds:
        date = str(bd[2]).split("-")[2]
        age = (now - datetime.datetime.strptime(bd[2], "%Y-%m-%d")).days // 365
        age_prefix = "–ª–µ—Ç" if list(str(age))[1] in ('0','5','6','7','8','9') else '–≥–æ–¥–∞'
        answer_text+=f"üéâ‚ÄºÔ∏è {bd[0]} {bd[1]} ‚ô¶Ô∏è {date} —á–∏—Å–ª–æ ‚ô¶Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç—Å—è: {age} {age_prefix}\n"
    await callback.message.edit_text(text=answer_text, reply_markup=footer_keyboard())

#–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–æ–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
@router.callback_query(Is_Superuser(), Text(text='admins_list'))
async def get_admins_list(callback: CallbackQuery):
    answer_text = "__*–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤:*__\n"
    for a in get_user_in_status("Admin"):
        answer_text+=f"‚ñ™Ô∏è {a[0]} {a[1]}\n"
    await callback.message.edit_text(text=answer_text, reply_markup=create_userlist_keyboard("SuperUser", now = 1, all = 1))

#–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–æ–∫–∞ –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥   
@router.callback_query(Is_Admin(), lambda callback: callback.data in ['users_list', 'next', 'prew', 'stop_prew', 'stop_next', '#'])
async def get_users_list(callback: CallbackQuery):
    now = datetime.datetime.now()
    answer_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤:\n"

    if callback.data == "users_list":
        user_page[callback.from_user.id] = 1
    elif callback.data == "next":
        user_page[callback.from_user.id] += 1
    elif callback.data == "prew":
        user_page[callback.from_user.id] -= 1
        
    page = user_page[callback.from_user.id]
    prepare_list = get_user_in_status()
    
    if callback.data in ["#", "stop_next", "stop_prew"]:
        await callback.answer()
    else:
        for u in prepare_list[page]:
            date = u[2].split("-")
            date[0], date[1], date[2] = date[2], month[date[1]], date[0]
            date = " ".join(date)
            age = (now - datetime.datetime.strptime(u[2], "%Y-%m-%d")).days // 365
            age_prefix = "–ª–µ—Ç" if list(str(age))[1] in ('0','5','6','7','8','9') else '–≥–æ–¥–∞'
            status_walley = f"–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥: {'–°–æ–±–∏—Ä–∞–µ–º' if u[4] == 'True' else '–ù–µ —Å–æ–±–∏—Ä–∞–µ–º'}"
            cash = f"–°—É–º–º–∞ —Å–±–æ—Ä–∞: {u[5]} —Ä—É–±–ª–µ–π"
            answer_text+=f"üìå __*{u[0]} {u[1]}*__\n{date}\n–í–æ–∑—Ä–∞—Å—Ç: {age} {age_prefix}\n{status_walley}\n{cash}\n\*\*\*\*\*\*\*\*\*\n"
            
        await callback.message.edit_text(text=answer_text,reply_markup=create_userlist_keyboard("Admin", now=page, all=len(prepare_list)))
 
#–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.callback_query(Is_Superuser(), lambda callback: "del_admin" in callback.data)
async def su_del_menu(callback:CallbackQuery):
    if callback.data.split("del_admin")[1] == "":
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=edit_status_user_keyboard("SuperUser","del"))
    else:
        await change_user(id_=callback.data.split("del_admin")[1], param="status", new_value="User")
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=edit_status_user_keyboard("SuperUser","del"))
        
#–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
@router.callback_query(Is_Admin(), lambda callback: callback.data in ['del_user', 'next_del', 'prew_del', 'stop_prew_del', 'stop_next_del','#_del']
                       or 'del_user' in callback.data)
async def admin_del_menu(callback:CallbackQuery):

    if callback.data == "del_user":
        user_page[callback.from_user.id] = 1
    elif callback.data == "next_del":
        user_page[callback.from_user.id] += 1
    elif callback.data == "prew_del":
        user_page[callback.from_user.id] -= 1
        
    page = user_page[callback.from_user.id]
    
    if callback.data in ["#_del", "stop_next_del", "stop_prew_del"]:
        await callback.answer()
    elif callback.data in ['prew_del','next_del', 'del_user']:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=edit_status_user_keyboard("Admin", "del", now=page)
            )
    else:
        await del_user(id_=callback.data.split("del_user")[1])
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=edit_status_user_keyboard("Admin", "del", now=page))

#–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.callback_query(Is_Superuser(), lambda callback: "add_admin" in callback.data)
async def su_del_menu(callback:CallbackQuery):
    if callback.data.split("add_admin")[1] == "":
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:",
            reply_markup=edit_status_user_keyboard("SuperUser","add"))
    else:
        await change_user(id_=callback.data.split("add_admin")[1], param="status", new_value="Admin")
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:",
            reply_markup=edit_status_user_keyboard("SuperUser", "add"))

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(Is_Admin(), lambda callback: "add_user" in callback.data, StateFilter(default_state))
async def user_add_name(callback:CallbackQuery,state: FSMContext):
    await callback.message.answer(text="–í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=footer_keyboard())
    await callback.message.delete()
    await state.set_state(FSMFillForm.fill_name)

#–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
@router.callback_query(Is_Admin(), lambda callback: callback.data in ['edit_user', 'next_edit', 'prew_edit', 'stop_prew_edit', 'stop_next_edit','#_edit'])
async def user_edit_list(callback:CallbackQuery):
    
    if callback.data == "edit_user":
        user_page[callback.from_user.id] = 1
    elif callback.data == "next_edit":
        user_page[callback.from_user.id] += 1
    elif callback.data == "prew_edit":
        user_page[callback.from_user.id] -= 1
        
    page = user_page[callback.from_user.id]

    if callback.data in ["#_edit", "stop_next_edit", "stop_prew_edit"]:
        await callback.answer()
    else:    
        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                                        reply_markup=edit_status_user_keyboard("Admin", "edit", now=page))

#–í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
@router.callback_query(Is_Admin(), StateFilter(default_state))
async def user_edit_menu(callback:CallbackQuery,state: FSMContext):
    await state.update_data(id_ = callback.data)
    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:",
                                     reply_markup=edit_user_keyboard())
    await state.set_state(FSMEditForm.process_edit)

#–í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
@router.callback_query(Is_Admin(), StateFilter(FSMEditForm.process_edit))
async def user_edit_param_select(callback:CallbackQuery,state: FSMContext):
    await callback.message.answer(text="–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
    reply_markup=footer_keyboard())
    await callback.message.delete()
    await callback.answer()
    await state.update_data(param = callback.data.split("_")[1])
    if callback.data.split("_")[1] == "name":
        await state.set_state(FSMEditForm.edit_name)
    elif callback.data.split("_")[1] == "surname":
        await state.set_state(FSMEditForm.edit_surname)
    elif callback.data.split("_")[1] == "date":
        await state.set_state(FSMEditForm.edit_date)
    elif callback.data.split("_")[1] == "statuswalley":
        await state.set_state(FSMEditForm.edit_statuswalley)
    elif callback.data.split("_")[1] == "cash":
        await state.set_state(FSMEditForm.edit_cash)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞     
@router.message(Is_Admin(), StateFilter(FSMEditForm.edit_name), F.text.isalpha())
async def user_edit_name(message:Message, state: FSMContext):
    await state.update_data(value = message.text.capitalize())
    new_param_info = await state.get_data()
    await change_user(id_=new_param_info['id_'], param=new_param_info['param'],
                new_value=str(new_param_info['value']))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:", reply_markup=edit_user_keyboard())
    await state.clear()

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞     
@router.message(Is_Admin(), StateFilter(FSMEditForm.edit_surname), F.text.isalpha())
async def user_edit_surname(message:Message, state: FSMContext):
    await state.update_data(value = message.text.capitalize())
    new_param_info = await state.get_data()
    await change_user(id_=new_param_info['id_'], param=new_param_info['param'],
                new_value=str(new_param_info['value']))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=create_start_keyboard("Admin"))
    await state.clear()

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
@router.message(StateFilter(FSMFillForm.fill_surname), F.text.isalpha())
async def user_add_date(message: Message, state: FSMContext):
    await state.update_data(surname = message.text.capitalize())
    await message.answer(text="–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì\.–ú–ú\.–î–î:",reply_markup=footer_keyboard())
    await state.set_state(FSMFillForm.fill_date)
    
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   
@router.message(StateFilter(FSMFillForm.fill_name), F.text.isalpha())
async def user_add_surname(message: Message, state: FSMContext):
    await state.update_data(name = message.text.capitalize())
    await message.answer(text="–í–≤–µ–¥–∏ —Ñ–∏–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=footer_keyboard())
    await state.set_state(FSMFillForm.fill_surname)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@router.message(StateFilter(FSMFillForm.fill_date), DateCheck())
async def user_add_id(message: Message, state: FSMContext):
    await state.update_data(date = message.text.replace('.', '-'))
    await message.answer(text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=footer_keyboard())
    await state.set_state(FSMFillForm.fill_id)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ 
@router.message(StateFilter(FSMEditForm.edit_date), DateCheck())
async def user_edit_date(message: Message, state: FSMContext):
    await state.update_data(value = message.text.replace('.', '-'))
    new_param_info = await state.get_data()
    await change_user(id_=new_param_info['id_'], param=new_param_info['param'],
                new_value=str(new_param_info['value']))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:", reply_markup=edit_user_keyboard())
    await state.clear()
    
#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ 
@router.message(StateFilter(FSMEditForm.edit_statuswalley), lambda Message: Message.text in ('–¥–∞', '–Ω–µ—Ç'))
async def user_edit_status(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        await state.update_data(value='True')
    else:
        await state.update_data(value='False') 
    new_param_info = await state.get_data()
    await change_user(id_=new_param_info['id_'], param=new_param_info['param'],
                new_value=str(new_param_info['value']))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:", reply_markup=edit_user_keyboard())
    await state.clear()
        
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥ —Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@router.message(StateFilter(FSMFillForm.fill_id), IsContact())
async def user_add_satus_walley(message: Message, state: FSMContext):
    await state.update_data(id_=message.contact.user_id)
    await message.answer(text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(–¥–∞\/–Ω–µ—Ç\)?",reply_markup=footer_keyboard())
    await state.set_state(FSMFillForm.fill_satus_walley)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
@router.message(StateFilter(FSMFillForm.fill_satus_walley), lambda Message: Message.text in ('–¥–∞', '–Ω–µ—Ç'))
async def process_add_new_user(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        await state.update_data(status_walley='True')
    else:
        await state.update_data(status_walley='False')     
    await message.answer(text = "‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω\!‚úÖ")
    new_user_info = await state.get_data()
    await add_user(name=new_user_info['name'], surname=new_user_info['surname'],
                   date=new_user_info['date'], id_=new_user_info['id_'],
                   status_walley=new_user_info["status_walley"],
                   cash=250)
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
        reply_markup=create_start_keyboard("Admin")
    )
    await message.delete()
    await state.clear()

#–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—É–º–º—ã —Å–±–æ—Ä–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ 
@router.message(StateFilter(FSMEditForm.edit_cash), F.text.isdigit())
async def user_edit_cash(message: Message, state: FSMContext):
    await state.update_data(value = message.text)
    new_param_info = await state.get_data()
    await change_user(id_=new_param_info['id_'], param=new_param_info['param'],
                new_value=str(new_param_info['value']))
    await message.answer("‚úÖ–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!‚úÖ\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:", reply_markup=edit_user_keyboard())
    await state.clear()

#–û—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
@router.message(StateFilter(FSMFillForm.fill_name, FSMEditForm.edit_name, FSMEditForm.edit_surname, 
                            FSMFillForm.fill_surname, FSMFillForm.fill_date, FSMFillForm.fill_id,
                            FSMFillForm.fill_satus_walley, FSMEditForm.edit_date, FSMEditForm.edit_statuswalley,
                            FSMEditForm.edit_cash, FSMEditNotif.edit_bank, FSMEditNotif.edit_phone,FSMSearchUser.input_surname))
async def incorrect_input_data(message: Message):
    await message.answer(text="–¢—ã –≤–≤–µ–ª —á—Ç–æ\-—Ç–æ –Ω–µ —Ç–æ:")
